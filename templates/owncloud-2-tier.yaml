heat_template_version: 2013-05-23
description: |
  Template to install ownCloud on a single server.

parameters:
  key_name:
    type: String
  flavor:
    type: String
    default: m1.small
  image:
    type: String
    default: ubuntu-owncloud

resources:

  web_sg:
    type:  AWS::EC2::SecurityGroup
    properties:
      GroupDescription: Enable ping/ssh/web
      SecurityGroupIngress:
      - {CidrIp: 0.0.0.0/0, FromPort: '-1', IpProtocol: icmp, ToPort: '-1'}
      - {CidrIp: 0.0.0.0/0, FromPort: '22', IpProtocol: tcp, ToPort: '22'}
      - {CidrIp: 0.0.0.0/0, FromPort: '80', IpProtocol: tcp, ToPort: '80'}

  db_sg:
    type:  AWS::EC2::SecurityGroup
    properties:
      GroupDescription: Enable ping/ssh/DB.
      SecurityGroupIngress:
      - {CidrIp: 0.0.0.0/0, FromPort: '-1', IpProtocol: icmp, ToPort: '-1'}
      - {CidrIp: 0.0.0.0/0, FromPort: '22', IpProtocol: tcp, ToPort: '22'}
      - {CidrIp: 10.0.0.0/24, FromPort: '3306', IpProtocol: tcp, ToPort: '3306'}

  mysql_root_pwd:
    type:  OS::Heat::RandomString

  oc_admin_pwd:
    type:  OS::Heat::RandomString

  oc_db_pwd:
    type:  OS::Heat::RandomString

  oc_db_server:
    type:  OS::Nova::Server
    properties:
      networks:
      - uuid: 'e68163e1-f6af-4a42-a958-d9e9b4e2a80f'
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      security_groups:
      - '3beff72a-51b2-4f03-bf05-44734fd630b8'
      user_data:
        str_replace:
          params:
            mysql_root_pwd: {get_attr: [mysql_root_pwd, value]}
            oc_db_pwd: {get_attr: [oc_db_pwd, value]}
            pwdsalt_wh: {get_resource: pwdsalt_wh}
          template: |
            #!/bin/bash -v
            /opt/aws/bin/cfn-init
            mysqladmin -u root password mysql_root_pwd
            cat << EOF | mysql -u root --password='mysql_root_pwd'
            drop database if exists ownclouddb;
            create database if not exists ownclouddb;
            grant all on ownclouddb.* to 'owncloud_user'@'localhost' identified by 'oc_db_pwd';
            grant all on ownclouddb.* to 'owncloud_user'@'10.0.0.%'         identified by 'oc_db_pwd';
            flush privileges;
            EOF

            # trigger database configuration
            curl http://localhost/owncloud/
            # And after this apache is not needed.
            service apache2 stop

            # extract the generated passwordsalt for other webservers
            salt=$(grep passwordsalt /var/www/html/owncloud/config/config.php | awk -F"'" '{print $4}')
            /opt/aws/bin/cfn-signal -i passwordsalt -e 0 --data "$salt" 'pwdsalt_wh'

    Metadata:
      AWS::CloudFormation::Init:
        config:
          services:
            sysvinit:
              mysqld: {enabled: 'true', ensureRunning: 'true'}
              apache2: {enabled: 'true', ensureRunning: 'true'}
          files:
            /var/www/html/owncloud/config/autoconfig.php:
              content:
                str_replace:
                  params:
                    oc_db_pwd: {get_attr: [oc_db_pwd, value]}
                    oc_admin_pwd: {get_attr: [oc_admin_pwd, value]}
                    owncloud_dbhost: localhost
                  template: |
                    <?php
                    $AUTOCONFIG = array(
                      'dbtype'        => 'mysql',
                      'dbname'        => 'ownclouddb',
                      'dbuser'        => 'owncloud_user',
                      'dbpass'        => 'oc_db_pwd',
                      'dbhost'        => 'owncloud_dbhost',
                      'dbtableprefix' => 'oc_',
                      'adminlogin'    => 'admin',
                      'adminpass'     => 'oc_admin_pwd',
                      'directory'     => '/var/www/html/owncloud/data',
                    );
              mode: '000640'
              owner: apache
              group: apache

  pwdsalt_wh:
    type: AWS::CloudFormation::WaitConditionHandle

  pwdsalt_wc:
    type: AWS::CloudFormation::WaitCondition
    DependsOn: oc_db_server
    properties:
      Handle: {Ref: pwdsalt_wh}
      Timeout: '600'

  oc_web_server:
    type:  OS::Nova::Server
    properties:
      networks:
      - uuid: 'e68163e1-f6af-4a42-a958-d9e9b4e2a80f'
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      security_groups:
      - '3beff72a-51b2-4f03-bf05-44734fd630b8'
      user_data:
        str_replace:
          params:
            alldone_wh: {get_resource: alldone_wh}
          template: |
            #!/bin/bash -v
            /opt/aws/bin/cfn-init
            /opt/aws/bin/cfn-signal -e 0 'alldone_wh'

    Metadata:
      AWS::CloudFormation::Init:
        config:
          services:
            sysvinit:
              apache2: {enabled: 'true', ensureRunning: 'true'}
          files:
            /var/www/html/owncloud/config/config.php:
              content:
                str_replace:
                  params:
                    oc_db_pwd: {get_attr: [oc_db_pwd, value]}
                    owncloud_passwordsalt:
                      'Fn::Select': ['passwordsalt', {get_attr: [pwdsalt_wc, Data]}]
                    owncloud_dbhost: {get_attr: [oc_db_server, first_address]}
                  template: |
                    <?php
                    $CONFIG = array(
                      'dbtype'        => 'mysql',
                      'dbname'        => 'ownclouddb',
                      'dbuser'        => 'owncloud_user',
                      'dbpassword'    => 'oc_db_pwd',
                      'dbhost'        => 'owncloud_dbhost',
                      'dbtableprefix' => 'oc_',
                      'datadirectory' => '/var/www/html/owncloud/data',
                      'passwordsalt'  => 'owncloud_passwordsalt',
                      'installed'     => true,
                      'updatechecker' => false,
                    );
              mode: '000640'
              owner: apache
              group: apache

  alldone_wh:
    type: AWS::CloudFormation::WaitConditionHandle

  alldone_wc:
    type: AWS::CloudFormation::WaitCondition
    DependsOn: oc_web_server
    properties:
      Handle: {get_resource: alldone_wh}
      Timeout: '600'

outputs:
  owncloud_server_url:
    description: URL to ownCloud
    value:
      str_replace:
        params:
          owncloud_ip: {get_attr: [oc_web_server, first_address]}
        template: http://owncloud_ip/owncloud/

  oc_admin_pwd:
    description: Generated password for ownCloud admin user
    value: {get_attr: [oc_admin_pwd, value]}
